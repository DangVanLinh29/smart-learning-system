from flask import Flask, jsonify, request
from flask_cors import CORS
import pandas as pd
import random

# IMPORT C√ÅC MODULE C·ªêT L√ïI
from tlu_api import authenticate_tlu, fetch_student_marks 
from recommender import (
    process_tlu_data_to_progress, 
    get_recommendation_logic, 
    predict_future_logic,
    get_insight_logic
)
from database import update_student_session, save_progress_history, init_db # <--- TH√äM init_db

app = Flask(__name__)
CORS(app)

# KH·ªûI T·∫†O CSDL NGAY KHI APP B·∫ÆT ƒê·∫¶U CH·∫†Y ƒê·ªÇ ƒê·∫¢M B·∫¢O C·∫§U TR√öC ƒê√É C√ì
init_db() 

# L∆∞u tr·ªØ phi√™n ƒëƒÉng nh·∫≠p (token v√† info) t·∫°m th·ªùi trong memory
user_sessions = {} 


@app.route('/api/login', methods=['POST'])
def login():
    """
    API ƒëƒÉng nh·∫≠p. Nh·∫≠n MSV v√† M·∫≠t kh·∫©u t·ª´ frontend, x√°c th·ª±c v·ªõi TLU API.
    """
    data = request.get_json()
    student_id = data.get('student_id')
    password = data.get('password') 
    
    if not student_id or not password:
        return jsonify({"success": False, "message": "Vui l√≤ng cung c·∫•p MSV v√† m·∫≠t kh·∫©u."}), 400

    # 1. X√ÅC TH·ª∞C V·ªöI API TLU
    auth_result = authenticate_tlu(student_id, password) 

    if auth_result and auth_result.get("success"):
        
        # L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa sinh vi√™n
        student_info = {
            "student_id": auth_result["student_id"],
            "name": auth_result["name"],
            "major": auth_result.get("major", "H·ªá th·ªëng th√¥ng tin") 
        }
        
        # 2. L∆ØU PHI√äN ƒêƒÇNG NH·∫¨P V√ÄO CSDL V√Ä C·∫¨P NH·∫¨T LAST_LOGIN
        update_student_session(student_info, auth_result["access_token"])
        
        # 3. L∆ØU PHI√äN T·∫†M TH·ªúI TRONG MEMORY (ƒê·ªÉ l·∫•y token nhanh)
        user_sessions[student_info["student_id"]] = {
            "access_token": auth_result["access_token"],
            "name": student_info["name"],
            "student_info": student_info
        }

        # 4. TR·∫¢ V·ªÄ TH√îNG TIN SINH VI√äN
        return jsonify({
            "success": True,
            "student": student_info
        }), 200
    
    # TR·∫¢ V·ªÄ L·ªñI X√ÅC TH·ª∞C T·ª™ TLU API
    return jsonify({"success": False, "message": "Sai m√£ sinh vi√™n ho·∫∑c m·∫≠t kh·∫©u."}), 401


# Trong file app.py, thay th·∫ø h√†m get_progress_data hi·ªán t·∫°i b·∫±ng code n√†y:
def get_progress_data(student_id):
    """
    H√†m h·ªó tr·ª£ l·∫•y d·ªØ li·ªáu ti·∫øn ƒë·ªô th·∫≠t t·ª´ TLU API, sau ƒë√≥ l∆∞u v√†o CSDL.
    """
    session = user_sessions.get(student_id)
    if not session:
        return None, "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n."

    try:
        # 1. L·∫§Y D·ªÆ LI·ªÜU ƒêI·ªÇM T·ªîNG K·∫æT T·ª™ TLU API
        tlu_marks = fetch_student_marks(session["access_token"])
        
        if tlu_marks is None or not isinstance(tlu_marks, list):
            print("C·∫¢NH B√ÅO: TLU API tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá. Tr·∫£ v·ªÅ None.")
            return None, "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ƒëi·ªÉm t·ªïng k·∫øt t·ª´ TLU API."

        # 2. X·ª≠ l√Ω d·ªØ li·ªáu th√¥ th√†nh ƒë·ªãnh d·∫°ng ti·∫øn ƒë·ªô
        progress_data = process_tlu_data_to_progress(tlu_marks, student_id)
        
        # 3. L∆ØU TI·∫æN ƒê·ªò V√ÄO CSDL
        save_progress_history(student_id, progress_data)
        
        return progress_data, None
        
    except Exception as e:
        # B·∫ÆT L·ªñI T·ªîNG QUAN V√Ä IN RA LOG ƒê·ªÇ D·ªÑ DEBUG
        print(f"L·ªñI NGHI√äM TR·ªåNG TRONG get_progress_data cho SV {student_id}: {e}")
        import traceback
        traceback.print_exc()
        return None, "L·ªói x·ª≠ l√Ω d·ªØ li·ªáu n·ªôi b·ªô."


@app.route('/api/progress/<student_id>', methods=['GET'])
def get_progress(student_id):
    """ API l·∫•y ti·∫øn ƒë·ªô h·ªçc t·∫≠p cho Dashboard """
    progress_data, error = get_progress_data(student_id)
    if error:
        return jsonify({"message": error}), 500
        
    return jsonify(progress_data)


@app.route('/api/recommendation/<student_id>', methods=['GET'])
def get_recommendation(student_id):
    """ API l·∫•y l·ªô tr√¨nh g·ª£i √Ω h·ªçc t·∫≠p (d√πng logic recommender) """
    progress_data, error = get_progress_data(student_id)
    if error:
        return jsonify({"message": error}), 500
        
    recommendations = get_recommendation_logic(progress_data)
    # TODO: C·∫ßn l∆∞u recommendations v√†o Recommendation_Logs
    return jsonify(recommendations)


@app.route('/api/predict/<student_id>', methods=['GET'])
def predict_future(student_id):
    """ API D·ª± b√°o ti·∫øn ƒë·ªô h·ªçc t·∫≠p (d√πng logic recommender) """
    progress_data, error = get_progress_data(student_id)
    if error:
        return jsonify({"message": error}), 500
        
    predictions = predict_future_logic(progress_data)
    # TODO: C·∫ßn l∆∞u predictions v√†o Recommendation_Logs
    return jsonify(predictions)


@app.route('/api/insight', methods=['GET'])
def get_insight():
    """ API Ph√¢n t√≠ch AI t·ªïng quan (d√πng logic recommender) """
    # L·∫•y d·ªØ li·ªáu c·ªßa sinh vi√™n ƒë·∫ßu ti√™n trong session ƒë·ªÉ ph√¢n t√≠ch
    student_id = list(user_sessions.keys())[0] if user_sessions else None

    if not student_id:
        return jsonify({"insights": ["Ch∆∞a c√≥ sinh vi√™n ƒëƒÉng nh·∫≠p ƒë·ªÉ ph√¢n t√≠ch."]})

    progress_data, error = get_progress_data(student_id)

    if error or not progress_data:
        return jsonify({"insights": ["Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch t∆∞∆°ng quan."]})
        
    insights = get_insight_logic(progress_data)
    # TODO: C·∫ßn l∆∞u insights v√†o Recommendation_Logs
    return jsonify(insights)


@app.route('/')
def home():
    """ Trang ch·ªß / Ki·ªÉm tra tr·∫°ng th√°i Backend """
    return jsonify({"message": "Smart Learning System Backend Ready (TLU Integrated) üöÄ"})


if __name__ == '__main__':
    # Ch·∫°y ·ª©ng d·ª•ng Flask tr√™n c·ªïng 5000
    app.run(debug=False, port=5000)
