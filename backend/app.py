import os
from flask import Flask, jsonify, request
from flask_cors import CORS
from werkzeug.utils import secure_filename
import pandas as pd
import random
import json
import sqlite3 
import time 
from io import StringIO

# IMPORT C√ÅC MODULE M·ªöI 
from tlu_api import (
    authenticate_tlu, 
    fetch_student_marks,
    fetch_current_semester_id, 
    fetch_student_schedule     
)
from recommender import (
    process_tlu_data_to_progress, 
    get_recommendation_logic, 
    predict_future_logic,
    get_insight_logic,
    process_schedule_to_courses 
)

app = Flask(__name__)
CORS(app)

# ==============================
# Static upload (avatar)
# ==============================
UPLOAD_FOLDER = "static/uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg", "gif", "webp"}


def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route("/api/upload_avatar", methods=["POST"])
def upload_avatar():
    if "file" not in request.files or "student_id" not in request.form:
        return jsonify({"success": False, "message": "Thi·∫øu file ho·∫∑c m√£ sinh vi√™n!"}), 400

    file = request.files["file"]
    student_id = request.form["student_id"]

    if file.filename == "":
        return jsonify({"success": False, "message": "Ch∆∞a ch·ªçn file!"}), 400
    if not allowed_file(file.filename):
        return jsonify({"success": False, "message": "ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá!"}), 400

    filename = secure_filename(f"{student_id}.jpg")
    filepath = os.path.join(app.config["UPLOAD_FOLDER"], filename)
    file.save(filepath)

    avatar_url = f"http://127.0.0.1:5000/static/uploads/{filename}"
    return jsonify({"success": True, "url": avatar_url})


# --- THI·∫æT L·∫¨P CACHE (B·ªò NH·ªö ƒê·ªÜM) ---
DB_NAME = "tlu_cache.db"
CACHE_DURATION = 3600 # 1 gi·ªù

# Kh·ªüi t·∫°o k·∫øt n·ªëi to√†n c·ª•c (ƒë·ªÉ tr√°nh l·ªói ghi ƒë√®)
# Tuy nhi√™n, trong Flask ƒëa lu·ªìng an to√†n h∆°n l√† m·ªü v√† ƒë√≥ng k·∫øt n·ªëi
# Ch√∫ng ta s·∫Ω gi·ªØ nguy√™n logic m·ªü/ƒë√≥ng, nh∆∞ng s·ª≠a l·ªói truy v·∫•n.

def init_db():
    """ Kh·ªüi t·∫°o CSDL SQLite (ch·∫°y 1 l·∫ßn) """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    # T·∫°o b·∫£ng cache (student_id, data_type, json_data, timestamp)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS api_cache (
        student_id TEXT,
        data_type TEXT,
        json_data TEXT,
        timestamp REAL,
        PRIMARY KEY (student_id, data_type)
    )
    ''')
    conn.commit()
    conn.close()

    
def get_from_cache(student_id, data_type):
    """ L·∫•y d·ªØ li·ªáu t·ª´ cache (n·∫øu c√≥ v√† ch∆∞a h·∫øt h·∫°n) """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # üö® S·ª¨A L·ªñI 2: TH√äM L·ªÜNH TRUY V·∫§N
    cursor.execute('''
        SELECT json_data, timestamp 
        FROM api_cache 
        WHERE student_id = ? AND data_type = ?
    ''', (student_id, data_type))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        # L·∫•y d·ªØ li·ªáu v√† timestamp
        json_data, cache_timestamp = result
        
        # üö® S·ª¨A L·ªñI 3: KI·ªÇM TRA TH·ªúI GIAN H·∫æT H·∫†N
        if time.time() - cache_timestamp > CACHE_DURATION:
            print(f"CACHE EXPIRED: Du lieu {data_type} da het han. Goi lai API TLU.")
            return None
            
        print(f"CACHE HIT: Tra ve du lieu {data_type} cho {student_id} tu CSDL.")
        
        try:
            # D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng JSON String (pd.to_json)
            # D√πng pd.read_json ƒë·ªÉ ƒë·ªçc ra DataFrame
            # Anh n√™n d√πng data=json_data ch·ª© kh√¥ng ph·∫£i result[0]
            # ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë·ªçc ra l√† DataFrame
            json_io = StringIO(json_data) 
            return pd.read_json(json_io, orient='records')

        except Exception as e:
            # In ra l·ªói n·∫øu kh√¥ng th·ªÉ ƒë·ªçc JSON (Serialization Error)
            print(f"ERROR: Khong the doc/convert JSON tu cache CSDL: {e}")
            return None 
    
    print(f"CACHE MISS: Khong tim thay {data_type} cho {student_id} trong CSDL.")
    return None

def set_to_cache(student_id, data_type, data):
    """ L∆∞u d·ªØ li·ªáu v√†o cache CSDL """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        # üö® S·ª¨A L·ªñI LOGIC: Ch·∫Øc ch·∫Øn ƒë·∫ßu v√†o l√† list/dict tr∆∞·ªõc khi t·∫°o DataFrame
        if isinstance(data, pd.DataFrame):
             data_to_serialize = data
        elif isinstance(data, list) and all(isinstance(i, dict) for i in data):
             # N·∫øu ƒë·∫ßu v√†o l√† List of Dicts (nh∆∞ t·ª´ API TLU), ta t·∫°o DataFrame
             data_to_serialize = pd.DataFrame(data)
        else:
             print(f"ERROR: Du lieu {data_type} khong the luu vao cache (phai la list/DataFrame).")
             return

        # Chuy·ªÉn DataFrame th√†nh JSON (Text) d√πng orient='records'
        json_data = data_to_serialize.to_json(orient='records') 
        
        cursor.execute(
            "INSERT OR REPLACE INTO api_cache (student_id, data_type, json_data, timestamp) VALUES (?, ?, ?, ?)",
            (student_id, data_type, json_data, time.time())
        )
        conn.commit()
        print(f"CACHE SET: Da luu du lieu {data_type} cho {student_id} vao CSDL.")
    except Exception as e:
        print(f"ERROR: Khong the luu vao cache. Ly do: {e}")
    finally:
        conn.close()
# --- K·∫æT TH√öC THI·∫æT L·∫¨P CACHE ---

# L∆∞u tr·ªØ phi√™n ƒëƒÉng nh·∫≠p (token v√† info) t·∫°m th·ªùi
user_sessions = {} 


@app.route('/api/login', methods=['POST'])
def login():
    """
    API ƒëƒÉng nh·∫≠p. Nh·∫≠n MSV v√† M·∫≠t kh·∫©u t·ª´ frontend.
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "Yeu cau khong co JSON body."}), 400
            
        student_id = data.get('student_id')
        password = data.get('password') 
        
        if not student_id or not password: 
            return jsonify({"success": False, "message": "Vui long cung cap MSV va mat khau."}), 400

        auth_result = authenticate_tlu(student_id, password) 

        if auth_result and auth_result.get("success"):
            user_sessions[student_id] = {
                "access_token": auth_result["access_token"],
                "name": auth_result["name"],
                "student_info": auth_result
            }
            
            return jsonify({
                "success": True,
                "student": {
                    "student_id": auth_result["student_id"],
                    "name": auth_result["name"],
                    "major": auth_result["major"]
                }
            }), 200
        
        return jsonify({"success": False, "message": "Sai ma sinh vien hoac mat khau."}), 401
    
    except Exception as e:
        print(f"LOI CRITICAL TAI API LOGIN: {e}")
        return jsonify({"success": False, "message": "Loi server khi dang nhap."}), 500


def get_ALL_marks_data(student_id): 
    """ 
    H√†m h·ªó tr·ª£: L·∫•y d·ªØ li·ªáu ƒêI·ªÇM T·ªîNG K·∫æT (T·∫•t c·∫£ c√°c m√¥n ƒë√£ h·ªçc).
    """
    cached_data = get_from_cache(student_id, "marks")
    if cached_data is not None: # üö® S·ª¨A L·ªñI: Ki·ªÉm tra 'is not None' (v√¨ DataFrame c√≥ th·ªÉ r·ªóng)
        return cached_data, None 

    session = user_sessions.get(student_id)
    if not session or "access_token" not in session:
        return None, "Phien dang nhap het han."

    access_token = session.get("access_token")
    
    tlu_marks = fetch_student_marks(access_token)
    
    if tlu_marks is None: 
        return None, "Khong the lay du lieu diem tong ket tu TLU API."
    
    progress_data = process_tlu_data_to_progress(tlu_marks, student_id)
    
    set_to_cache(student_id, "marks", progress_data)

    return progress_data, None


@app.route('/api/progress/<student_id>', methods=['GET'])
def get_progress(student_id):
    """ 
    API l·∫•y ti·∫øn ƒë·ªô h·ªçc t·∫≠p (d√πng cho Dashboard).
    S·ª≠ d·ª•ng API ƒêi·ªÉm t·ªïng k·∫øt (ƒê√£ c√≥ Cache).
    """
    progress_data, error = get_ALL_marks_data(student_id) 
    if error:
        return jsonify({"message": error}), 500
        
    # üö® S·ª¨A L·ªñI TYPEERROR: 
    # Chuy·ªÉn DataFrame (Pandas) v·ªÅ JSON (orient='records') ƒë·ªÉ g·ª≠i cho Frontend
    return jsonify(progress_data.to_dict(orient='records'))



@app.route('/api/recommendation/<student_id>', methods=['GET'])
def get_recommendation(student_id):
    """ 
    API l·∫•y l·ªô tr√¨nh g·ª£i √Ω h·ªçc t·∫≠p (d√πng cho trang G·ª£i √Ω).
    S·ª≠ d·ª•ng API ƒêi·ªÉm t·ªïng k·∫øt.
    """
    progress_data, error = get_ALL_marks_data(student_id) 
    if error:
        return jsonify({"message": error}), 500
    
    recommendations = get_recommendation_logic(progress_data)
    return jsonify(recommendations)


@app.route('/api/insight', methods=['GET'])
def get_insight():
    """ 
    API Ph√¢n t√≠ch AI t·ªïng quan (d√πng cho Dashboard).
    S·ª≠ d·ª•ng API ƒêi·ªÉm t·ªïng k·∫øt (c·ªßa sinh vi√™n ƒë·∫ßu ti√™n ƒëƒÉng nh·∫≠p).
    """
    student_id = list(user_sessions.keys())[0] if user_sessions else None
    if not student_id:
           return jsonify({"insights": ["Chua co sinh vien dang nhap de phan tich."]})

    progress_data, error = get_ALL_marks_data(student_id) 

    if error or progress_data.empty: # üö® S·ª¨A L·ªñI: Ki·ªÉm tra DataFrame r·ªóng
        return jsonify({"insights": ["Khong du du lieu de phan tich tuong quan."]})
        
    insights = get_insight_logic(progress_data)
    return jsonify(insights)

# ==============================
# API d·ª± b√°o: d·ª±a tr√™n score10 (tr·∫£ c·∫£ score10 & progress %)
# ==============================
@app.route('/api/predict/<student_id>', methods=['GET'])
def predict_future(student_id):
    """ API D·ª± b√°o ti·∫øn ƒë·ªô h·ªçc t·∫≠p """
    progress_list, error = get_ALL_marks_data(student_id)
    if error:
        return jsonify({"message": error}), 500
        
    # CHUY·ªÇN DANH S√ÅCH TI·∫æN ƒê·ªò TH√ÄNH DATAFRAME TR∆Ø·ªöC KHI D·ª∞ ƒêO√ÅN
    try:
        progress_data = pd.DataFrame(progress_list)
    except Exception as e:
        # X·ª≠ l√Ω n·∫øu list r·ªóng ho·∫∑c format sai
        return jsonify({"message": f"Loi khi tao DataFrame tu tien do: {e}"}), 500

    predictions = predict_future_logic(progress_data) 
    return jsonify(predictions)


# --- API CHO TRANG "C√ÅC M√îN ƒêANG H·ªåC" (M·ªöI, ƒê√É C√ì CACHE) ---

@app.route('/api/current-schedule/<student_id>', methods=['GET'])
def get_current_schedule(student_id):
    """
    API l·∫•y c√°c m√¥n ƒêANG H·ªåC (cho trang SchedulePage.js)
    S·ª≠ d·ª•ng API L·ªãch h·ªçc (fetch_student_schedule) thay v√¨ API ƒêi·ªÉm.
    """
    cached_data = get_from_cache(student_id, "schedule")
    if cached_data is not None: # üö® S·ª¨A L·ªñI: Ki·ªÉm tra 'is not None'
        return jsonify(cached_data.to_dict(orient='records')) # üö® S·ª¨A L·ªñI: Chuy·ªÉn DataFrame v·ªÅ JSON

    session = user_sessions.get(student_id)
    if not session or "access_token" not in session:
        return jsonify({"error": "Phien dang nhap het han."}), 401

    access_token = session.get("access_token")

    current_semester_id = fetch_current_semester_id(access_token)
    if not current_semester_id:
        return jsonify({"error": "Khong the lay du lieu hoc ky hien tai."}), 500

    schedule_data = fetch_student_schedule(access_token, current_semester_id)
    
    if schedule_data is None: 
        return jsonify({"error": "Khong the lay du lieu lich hoc."}), 500
    
    processed_schedule = process_schedule_to_courses(schedule_data, student_id)
    
    set_to_cache(student_id, "schedule", processed_schedule)
    
    return jsonify(processed_schedule.to_dict(orient='records')) # üö® S·ª¨A L·ªñI: Chuy·ªÉn DataFrame v·ªÅ JSON


@app.route('/')
def home():
    return jsonify({"message": "Smart Learning System Backend Ready (TLU Integrated) üöÄ"})

if __name__ == '__main__':
    init_db() 
    app.run(debug=True, port=5001)