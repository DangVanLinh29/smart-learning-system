import sqlite3
import os
import json
import getpass
from datetime import datetime
import sys
# Fix l·ªói encoding khi in ra console
sys.stdout.reconfigure(encoding='utf-8')

# üö® IMPORT C√ÅC H√ÄM API T·ª™ FILE TLU API HANDLER (ƒê√É C√ì ·ªû C·ª¨A S·ªî B√äN PH·∫¢I)
from tlu_api_handler import (
    authenticate_tlu,
    fetch_student_data,
    fetch_student_marks
)

DATABASE_NAME = 'smart_learning.db'

# --- 1. H√ÄM QU·∫¢N L√ù C∆† S·ªû D·ªÆ LI·ªÜU ---

def create_connection(db_file):
    """T·∫°o k·∫øt n·ªëi CSDL v√† b·∫≠t kh√≥a ngo·∫°i."""
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        conn.execute("PRAGMA foreign_keys = ON;")
        return conn
    except sqlite3.Error as e:
        print(f"L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu: {e}")
        return None

def create_tables(conn):
    """T·∫°o t·∫•t c·∫£ c√°c b·∫£ng c·∫ßn thi·∫øt."""
    cursor = conn.cursor()
    
    # 1. B·∫£ng STUDENTS (Sinh vi√™n)
    sql_create_students_table = """
    CREATE TABLE IF NOT EXISTS students (
        student_id TEXT PRIMARY KEY,
        full_name TEXT NOT NULL,
        email TEXT UNIQUE,
        date_of_birth TEXT,
        major TEXT
    );
    """

    # 2. B·∫£ng SUBJECTS (M√¥n h·ªçc)
    sql_create_subjects_table = """
    CREATE TABLE IF NOT EXISTS subjects (
        subject_id TEXT PRIMARY KEY,
        subject_name TEXT NOT NULL,
        credits INTEGER NOT NULL,
        description TEXT
    );
    """
    
    # 3. B·∫£ng GRADES (ƒêi·ªÉm s·ªë) - Li√™n k·∫øt Sinh vi√™n v√† M√¥n h·ªçc
    sql_create_grades_table = """
    CREATE TABLE IF NOT EXISTS grades (
        grade_id INTEGER PRIMARY KEY AUTOINCREMENT,
        student_id TEXT NOT NULL,
        subject_id TEXT NOT NULL,
        semester TEXT NOT NULL,
        score REAL,
        FOREIGN KEY (student_id) REFERENCES students (student_id) ON DELETE CASCADE,
        FOREIGN KEY (subject_id) REFERENCES subjects (subject_id) ON DELETE CASCADE,
        UNIQUE (student_id, subject_id, semester)
    );
    """
    
    # 4. B·∫£ng LOG_HISTORY (Nh·∫≠t k√Ω thay ƒë·ªïi/h√†nh ƒë·ªông)
    sql_create_log_history_table = """
    CREATE TABLE IF NOT EXISTS log_history (
        log_id INTEGER PRIMARY KEY AUTOINCREMENT,
        student_id TEXT,
        action TEXT NOT NULL,
        timestamp TEXT NOT NULL,
        details TEXT,
        FOREIGN KEY (student_id) REFERENCES students (student_id) ON DELETE SET NULL
    );
    """
    
    # 5. B·∫£ng CHATBOT_LOGS (Nh·∫≠t k√Ω Chatbot)
    sql_create_chatbot_logs_table = """
    CREATE TABLE IF NOT EXISTS chatbot_logs (
        chat_id INTEGER PRIMARY KEY AUTOINCREMENT,
        student_id TEXT,
        timestamp TEXT NOT NULL,
        user_query TEXT NOT NULL,
        chatbot_response TEXT NOT NULL,
        FOREIGN KEY (student_id) REFERENCES students (student_id) ON DELETE SET NULL
    );
    """

    try:
        cursor.execute(sql_create_students_table)
        cursor.execute(sql_create_subjects_table)
        cursor.execute(sql_create_grades_table)
        cursor.execute(sql_create_log_history_table)
        cursor.execute(sql_create_chatbot_logs_table)
        conn.commit()
    except sqlite3.Error as e:
        print(f"L·ªói khi t·∫°o b·∫£ng: {e}")

# --- 2. H√ÄM ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU ---

def sync_student_data(conn, student_info):
    """L∆∞u th√¥ng tin c√° nh√¢n sinh vi√™n v√†o b·∫£ng students."""
    cursor = conn.cursor()
    student_id = student_info.get('student_id')
    
    if student_id == 'N/A':
        return 0

    full_name = student_info.get('name', 'N/A')
    email = student_info.get('email')
    major = student_info.get('major', 'N/A')
    
    # X·ª≠ l√Ω n·∫øu email kh√¥ng c√≥, t·∫°o email gi·∫£ ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói UNIQUE
    if email == 'N/A' or not email:
        email = f"{student_id}@tlu.edu.vn" 

    try:
        # INSERT OR REPLACE: Ch√®n ho·∫∑c thay th·∫ø n·∫øu student_id ƒë√£ t·ªìn t·∫°i
        cursor.execute("""
            INSERT OR REPLACE INTO students (student_id, full_name, email, date_of_birth, major)
            VALUES (?, ?, ?, ?, ?)
        """, (student_id, full_name, email, None, major))
        conn.commit()
        print(f"‚úÖ L∆∞u th√¥ng tin sinh vi√™n {student_id} th√†nh c√¥ng.")
        return 1
    except sqlite3.Error as e:
        print(f"‚ùå L·ªói l∆∞u th√¥ng tin sinh vi√™n: {e}")
        return 0

def sync_marks_and_subjects(conn, student_id, access_token):
    """L·∫•y ƒëi·ªÉm s·ªë v√† c·∫≠p nh·∫≠t b·∫£ng subjects/grades."""
    marks_data = fetch_student_marks(access_token)
    
    if not marks_data:
        print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm s·ªë ƒë·ªÉ ƒë·ªìng b·ªô.")
        return

    cursor = conn.cursor()
    count = 0
    
    # Duy·ªát qua t·ª´ng m√¥n h·ªçc ƒë√£ c√≥ ƒëi·ªÉm
    for subject in marks_data:
        try:
            # 1. TR√çCH XU·∫§T TH√îNG TIN M√îN H·ªåC
            subject_details = subject.get("subject", {})
            subject_id = subject_details.get("subjectCode", "N/A") 
            subject_name = subject_details.get("subjectName", "N/A")
            credits = subject_details.get("credit", 0)
            
            # 2. TR√çCH XU·∫§T ƒêI·ªÇM V√Ä H·ªåC K·ª≤
            score = subject.get("mark") # ƒêi·ªÉm cu·ªëi c√πng
            semester = subject.get("semesterName", "N/A")

            if subject_id == 'N/A' or score is None:
                continue

            # --- INSERT/UPDATE SUBJECTS ---
            # INSERT OR IGNORE: Ch·ªâ ch√®n n·∫øu subject_id ch∆∞a t·ªìn t·∫°i
            cursor.execute("""
                INSERT OR IGNORE INTO subjects (subject_id, subject_name, credits)
                VALUES (?, ?, ?)
            """, (subject_id, subject_name, credits))

            # --- INSERT/UPDATE GRADES ---
            # INSERT OR REPLACE: Thay th·∫ø ƒëi·ªÉm n·∫øu ƒë√£ t·ªìn t·∫°i cho SV/M√¥n/K·ª≥ n√†y
            cursor.execute("""
                INSERT OR REPLACE INTO grades (student_id, subject_id, semester, score)
                VALUES (?, ?, ?, ?)
            """, (student_id, subject_id, semester, score))
            count += 1
            
        except sqlite3.Error as e:
            subject_name_log = subject.get("subject", {}).get("subjectName", "Unknown Subject")
            print(f"‚ùå L·ªói ƒë·ªìng b·ªô ƒëi·ªÉm cho {subject_name_log}: {e}")

    conn.commit()
    print(f"‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng {count} m·ª•c ƒëi·ªÉm s·ªë v√† m√¥n h·ªçc.")

def sync_logs(conn, student_id, log_type, data):
    """L∆∞u log ƒë·ªìng b·ªô v√†o b·∫£ng log_history."""
    cursor = conn.cursor()
    action = f"API_Sync_{log_type}"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    try:
        # L∆∞u tr·ªØ to√†n b·ªô d·ªØ li·ªáu (JSON.dumps) ƒë·ªÉ debugging sau n√†y
        cursor.execute("""
            INSERT INTO log_history (student_id, action, timestamp, details) 
            VALUES (?, ?, ?, ?)
        """, (student_id, action, timestamp, json.dumps(data, ensure_ascii=False)))
        conn.commit()
    except sqlite3.Error as e:
        print(f"‚ùå L·ªói l∆∞u log: {e}")

# --- KH·ªêI CH·∫†Y CH√çNH ---

def initial_setup_and_sync(username, password):
    """Quy tr√¨nh ch√≠nh: T·∫°o CSDL, ƒêƒÉng nh·∫≠p API v√† ƒê·ªìng b·ªô."""
    
    # 0. T·∫†O HO·∫∂C K·∫æT N·ªêI CSDL
    conn = create_connection(DATABASE_NAME)
    if conn is None:
        return
    
    # ƒê·∫£m b·∫£o c√°c b·∫£ng t·ªìn t·∫°i tr∆∞·ªõc khi ƒë·ªìng b·ªô
    create_tables(conn)
    print(f"‚úÖ CSDL '{DATABASE_NAME}' v√† c√°c b·∫£ng ƒë√£ s·∫µn s√†ng.")

    print("\n--- B·∫ÆT ƒê·∫¶U QU√Å TR√åNH ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU TH·∫¨T TLU ---")
    
    # 1. AUTHENTICATE V√Ä L·∫§Y TOKEN
    access_token = authenticate_tlu(username, password)
    if not access_token:
        conn.close()
        return

    # 2. L·∫§Y TH√îNG TIN C√Å NH√ÇN (ƒë·ªÉ l·∫•y student_id)
    student_info = fetch_student_data(access_token)
    if not student_info or student_info.get('student_id') == 'N/A':
        print("‚ùå L·ªói: Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng (student_id). D·ª´ng ƒë·ªìng b·ªô.")
        conn.close()
        return

    student_id = student_info['student_id']

    # 3. L∆ØU TH√îNG TIN SINH VI√äN V√ÄO B·∫¢NG STUDENTS
    sync_student_data(conn, student_info)
    
    # 4. L∆ØU ƒêI·ªÇM V√Ä M√îN H·ªåC V√ÄO B·∫¢NG SUBJECTS V√Ä GRADES
    sync_marks_and_subjects(conn, student_id, access_token)

    # 5. GHI L·∫†I LOG ƒê·ªíNG B·ªò
    sync_logs(conn, student_id, "SUCCESS", student_info)

    conn.close()
    print("\n--- ƒê·ªíNG B·ªò K·∫æT TH√öC TH√ÄNH C√îNG ---")

if __name__ == '__main__':
    # Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG NH·∫¨P TH√îNG TIN
    STUDENT_ID = input("Nh·∫≠p M√£ Sinh Vi√™n TLU: ")
    PASSWORD = getpass.getpass("Nh·∫≠p M·∫≠t kh·∫©u TLU (s·∫Ω b·ªã ·∫©n): ")
    
    # Ch·∫°y quy tr√¨nh ƒë·ªìng b·ªô h√≥a
    initial_setup_and_sync(STUDENT_ID, PASSWORD)
